@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <title>Создание заказа</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <input type="hidden" id="order_id" value="@ViewData["OrderId"]" readonly>
    <input type="hidden" class="prov" id="provider_id" readonly>
    <style>
        .deleted {
          background-color: rgba(255,0,0,0.5);
        }
    </style>
</head>
<body onload="getProviders();">
<div class="container">
    <h1 class="mt-3">Просмотр заказа @ViewData["OrderId"]</h1>
    <div class="row mt-3">
        <div class="col-md-6">
            <form id="order-form">
                <div class="form-group">
                    <label for="number">Номер заказа:</label>
                    <input type="text" class="form-control order-number" id="number" required readonly>
                </div>
                <div class="form-group" id="provider-form-container-current" style="display:block;">
                    <label for="provider-readonly">Текущий поставщик:</label>
                    <input type="text" class="form-control" id="provider-readonly" readonly>
                </div>
                <div class="form-group" id="provider-form-container" style="display:none;">
                    <label for="provider-form">Изменить поставщика:</label>
                    <select class="form-control" id="provider-form"></select>
                </div>
                <div id="products-container">
                    <table class="table">
                        <thead>
                        <tr>
                            <th>Имя товара</th>
                            <th>Количество</th>
                            <th>Единица</th>
                            <th></th>
                        </tr>
                        </thead>
                        <tbody>
                        <tr class="product-row" required>
                            <td>
                                <div class="form-group">
                                    <input type="text" class="form-control" name="product[]" required>
                                </div>
                            </td>
                            <td>
                                <div class="form-group">
                                    <input type="number" class="form-control" name="quantity[]" required>
                                </div>
                            </td>
                            <td>
                                <div class="form-group">
                                    <input type="text" class="form-control" name="unit[]" required>
                                </div>
                            </td>
                            <td>
                                <div class="form-group">
                                    <button type="button" class="btn btn-danger remove-product">Удалить</button>
                                </div>
                            </td>
                        </tr>
                        </tbody>
                    </table>
                </div>
                <div class="btn-group d-flex justify-content-end mt-3" role="group">
                    <button type="button" id="edit-order" class="btn btn-primary btn-block">Редактировать</button>
                </div>
                <div class="btn-group d-flex justify-content-end mt-3" role="group">
                    <button type="button" id="add-product" class="btn btn-primary btn-block" style="display:none;">Добавить товар в заказ</button>
                </div>
                <div class="btn-group d-flex justify-content-end mt-3" role="group">
                    <button type="button" id="save-order" class="btn btn-success btn-block" style="display:none;">Сохранить</button>
                </div>
                <div class="btn-group d-flex justify-content-end mt-3" role="group">
                    <button type="button" id="delete-order" class="btn btn-danger btn-block">Удалить весь заказ</button>
                </div>
            </form>
        </div>
    </div>
</div>
<script>
const removeProduct = (event) => {
  const row = event.target.closest(".product-row");

  if (row.classList.contains("deleted")) {
    row.classList.remove("deleted");
  } else {
    row.classList.add("deleted");
  }

  if (row.classList.contains("edited")) {
    row.classList.remove("edited");
  }
};
const addProduct = () => {
  const row = document.createElement("tr");
  row.classList.add("product-row");
  row.classList.add("added");
  row.innerHTML = `
    <td>
      <div class="form-group">
        <input type="text" class="form-control" name="product[]" required>
      </div>
    </td>
    <td>
      <div class="form-group">
        <input type="number" class="form-control" name="quantity[]" required>
      </div>
    </td>
    <td>
      <div class="form-group">
        <input type="text" class="form-control" name="unit[]" required>
      </div>
    </td>
    <td>
      <div class="form-group">
        <button type="button" id="delete-item" class="btn btn-danger remove-product" style="display:block;">Удалить</button>
      </div>
    </td>
  `;
  document.querySelector("#products-container tbody").appendChild(row);
  row.querySelector(".remove-product").addEventListener("click", removeProduct);
};
const markAsEdited = (event) => {
  const row = event.target.closest(".product-row");
  row.classList.add("edited");
};

const numberField = document.getElementById("number");
numberField.addEventListener("input", () => {
  numberField.classList.add("edited");
});

let editing = false;

document.querySelectorAll(".remove-product").forEach((button) => {
  button.addEventListener("click", removeProduct);
});

document.querySelector("#add-product").addEventListener("click", addProduct);

document.querySelector("#save-order").addEventListener("click", saveChanges);

document.querySelector("#provider-form").addEventListener("click", () => {
  document.querySelector("#provider_id").value = document.querySelector("#provider-form").value;
  document.querySelector("#provider_id").classList.add("edited");
  console.log(document.querySelector("#provider-form").value);
});

document.querySelector("#edit-order").addEventListener("click", () => {
  editOrder();
});

document.querySelector("#delete-order").addEventListener("click", () => {
  deleteOrder();
});

async function deleteOrder() {
  const orderId = document.querySelector("#order_id").value;
  
  const response = await fetch(`/api/Order/DeleteOrderById?orderId=${orderId}`, {
    method: "DELETE"
  });
  
  if (response.ok) {
    window.location.replace("http://localhost:5196/OrderKeeper/Index/");
  } else {
    console.error(`Ошибка HTTP: ${response.status}`);
  }
}

async function editOrder() {
  const providerFormContainer = document.querySelector("#provider-form-container");
  const saveButton = document.querySelector("#save-order");
  const addProductButton = document.querySelector("#add-product");
  const currentProvider = document.querySelector("#provider-form-container-current");
  const editButton = document.querySelector("#edit-order");

  if (editing === false) {
    editing = true;

    editButton.textContent = "Назад";
    providerFormContainer.style.display = "block";
    saveButton.style.display = "block";
    addProductButton.style.display = "block";
    document.querySelectorAll("#delete-item").forEach((el) => (el.style.display = "block"));
    document.querySelectorAll("input, select").forEach((el) => el.removeAttribute("readonly"));
  } else {
    editing = false;

    editButton.textContent = "Редактировать";
    providerFormContainer.style.display = "none";
    saveButton.style.display = "none";
    addProductButton.style.display = "none";
    document.querySelectorAll("#delete-item").forEach((el) => (el.style.display = "none"));
    document.querySelectorAll("input, select").forEach((el) => el.setAttribute("readonly", true));
  }
}

async function getProviders() {
  fetch("/api/Provider/ListAll")
    .then((response) => response.json())
    .then((data) => {
      const selectElement = document.getElementById("provider-form");
      selectElement.innerHTML = "";
      data.forEach((provider) => {
        const optionElement = document.createElement("option");
        optionElement.text = provider.name;
        optionElement.value = provider.id;
        selectElement.add(optionElement);
      });
    });
}

async function getOrder(orderId) {
  const response = await fetch(`/api/Order/GetOrder?orderId=${orderId}`);
  return await response.json();
}

async function renderOrder() {
  editing = true;
  await editOrder();
  const orderId = document.querySelector("#order_id").value;
  const orderBody = await getOrder(orderId);

  document.querySelector("#number").value = orderBody.order.number;
  document.querySelector("#provider-readonly").value = orderBody.order.provider.name;
  document.querySelector("#provider_id").value = orderBody.order.provider.id;
  numberField.classList.remove("edited", true);

  const productsContainer = document.querySelector("#products-container tbody");
  productsContainer.innerHTML = "";

  for (const item of orderBody.order.orderItem) {
    const row = document.createElement("tr");

    row.setAttribute("data-orderItemId", item.id);
    row.setAttribute("data-orderId", item.orderId);
    row.classList.add("product-row");
    row.classList.add("exist");
    row.addEventListener("input", markAsEdited);

    row.innerHTML = `
      <td>
        <div class="form-group">
          <input type="text" class="form-control" name="product[]" value="${item.name}" required readonly>
        </div>
      </td>
      <td>
        <div class="form-group">
          <input type="number" class="form-control" name="quantity[]" value="${item.quantity}" required readonly>
        </div>
      </td>
      <td>
        <div class="form-group">
          <input type="text" class="form-control" name="unit[]" value="${item.unit}" required readonly>
        </div>
      </td>
      <td>
        <div class="form-group">
          <button type="button" id="delete-item" class="btn btn-danger remove-product" style="display:none;">Удалить</button>
        </div>
      </td>
    `;
    productsContainer.appendChild(row);
    row.querySelector(".remove-product").addEventListener("click", removeProduct);
  }
}

async function saveChanges() {
  const numberField = document.querySelectorAll(".order-number.edited");
  const providerReadonlyField = document.querySelectorAll(".prov.edited");
  const editedRows = document.querySelectorAll(".product-row.edited");

  console.log("numberField" + numberField.length);
  console.log("providerReadonlyField" + providerReadonlyField.length);
  console.log("editedRows" + editedRows.length);
 
  if (providerReadonlyField.length > 0 || numberField.length > 0 || editedRows.length > 0){
    await editRow(editedRows);
  }

  const deletedRows = document.querySelectorAll(".product-row.deleted:not(.added)");

  if (deletedRows.length > 0) {
    await deleteRow(deletedRows);
  }

  const addedRows = document.querySelectorAll(".product-row.added:not(.deleted)");

  if (addedRows.length > 0) {
    await addRow(addedRows);
  }

  async function editRow(editedRows) {
    try {
      console.log("Try to edit");
      for (const row of editedRows) {
        if (!row.dataset.orderitemid) {
          console.error("Missing order item ID for edited row:", row);
          return;
        }
      }

      const editedOrderItems = [];
      for (const row of editedRows) {
        editedOrderItems.push({
          id: parseInt(row.dataset.orderitemid),
          name: row.querySelector('input[name="product[]"]').value,
          quantity: parseFloat(row.querySelector('input[name="quantity[]"]').value),
          unit: row.querySelector('input[name="unit[]"]').value,
        });
      }
      
      const orderId = document.querySelector("#order_id").value;
      let number;
      const providerId = document.querySelector("#provider_id").value;
      
      if (numberField.length>0)
        {
          number =  document.querySelector("#number").value;         
        }
      else 
        {
           number = null;
        }
      
     

      const request = JSON.stringify({
        orderId,
        providerId,
        number,
        orderItems: editedOrderItems,
      });
      console.log(request);

      const response = await fetch("/api/Order/UpdateOrder", {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: request,
      });

      if (response.ok) {
        console.log("Order updated successfully!");
        editedRows.forEach((row) => row.classList.remove("edited"));
     } else {
           const errorResponse = await response.json();
           const errorMessage = errorResponse.message;
           console.error("Failed to update order:", errorMessage);
           alert(errorMessage);
         }
    } catch (error) {
      console.error("An error occurred while updating the order:", error);
    }
  }

  async function deleteRow(deletedRows) {
    try {
      console.log("Try to delete");
      const deletedOrderItems = [];
      for (const row of deletedRows) {
        if (!row.dataset.orderitemid) {
          console.error("Missing order item ID for deleted row:", row);
          return;
        }
        deletedOrderItems.push(parseInt(row.dataset.orderitemid));
      }

      const request = JSON.stringify(deletedOrderItems);
      console.log(request);

      const response = await fetch("/api/Order/DeleteItemInOrder", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: request,
      });

      if (response.ok) {
        console.log("Order deleted successfully!");
     } else {
           const errorResponse = await response.json();
           const errorMessage = errorResponse.message;
           console.error("Failed to delete order:", errorMessage);
           alert(errorMessage);
         }
    } catch (error) {
      console.error("An error occurred while delete the order:", error);
    }
  }

  async function addRow(addedRows) {
    try {
      console.log("Try to add");
      const addedOrderItems = [];
      for (const row of addedRows) {
        const productInput = row.querySelector('input[name="product[]"]');
        const quantityInput = row.querySelector('input[name="quantity[]"]');
        const unitInput = row.querySelector('input[name="unit[]"]');
        if (productInput.value !== "" && quantityInput.value !== "" && unitInput.value !== "") {
          addedOrderItems.push({
            name: productInput.value,
            quantity: parseFloat(quantityInput.value),
            unit: unitInput.value,
          });
        }
      }

      const orderId = document.querySelector("#order_id").value;
      const request = JSON.stringify(addedOrderItems);
      console.log(request);

      const response = await fetch(`/api/Order/AddItemToOrder?orderId=${orderId}`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: request,
      });

      if (response.ok) {
        console.log("Order added successfully!");
      } else {
            const errorResponse = await response.json();
            const errorMessage = errorResponse.message;
            console.error("Failed to add in order:", errorMessage);
            alert(errorMessage);
          }
    } catch (error) {
      console.error("An error occurred while add the order:", error);
    }
  }

  await renderOrder();
}
renderOrder();
</script>
</body>
</html>